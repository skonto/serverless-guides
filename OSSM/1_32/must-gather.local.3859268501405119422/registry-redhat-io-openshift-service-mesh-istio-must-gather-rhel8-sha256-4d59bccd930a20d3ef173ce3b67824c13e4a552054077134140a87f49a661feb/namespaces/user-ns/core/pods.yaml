---
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      autoscaling.knative.dev/minScale: "2"
      autoscaling.knative.dev/target: "10"
      autoscaling.knative.dev/targetBurstCapacity: "0"
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.2.23/23"],"mac_address":"0a:58:0a:81:02:17","gateway_ips":["10.129.2.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.2.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.2.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.2.1"}],"ip_address":"10.129.2.23/23","gateway_ip":"10.129.2.1"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.2.23"
            ],
            "mac": "0a:58:0a:81:02:17",
            "default": true,
            "dns": {}
        },{
            "name": "user-ns/v2-4-istio-cni",
            "dns": {}
        }]
      k8s.v1.cni.cncf.io/networks: v2-4-istio-cni
      kubectl.kubernetes.io/default-container: user-container
      kubectl.kubernetes.io/default-logs-container: user-container
      openshift.io/scc: restricted-v2
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      queue.sidecar.serving.knative.dev/resourcePercentage: "0.3"
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
      serving.knative.dev/creator: system:admin
      sidecar.istio.io/inject: "true"
      sidecar.istio.io/interceptionMode: REDIRECT
      sidecar.istio.io/rewriteAppHTTPProbers: "true"
      sidecar.istio.io/status: '{"initContainers":null,"containers":["istio-proxy"],"volumes":["workload-socket","credential-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null,"revision":"basic"}'
      traffic.sidecar.istio.io/excludeInboundPorts: 15090,8444,8022,15021
      traffic.sidecar.istio.io/includeInboundPorts: '*'
      traffic.sidecar.istio.io/includeOutboundIPRanges: '*'
    creationTimestamp: "2024-06-05T10:59:13Z"
    generateName: helloworld-go-00001-deployment-5bd78dbc5f-
    labels:
      app: helloworld-go
      failure-domain.beta.kubernetes.io/region: us-east-1
      failure-domain.beta.kubernetes.io/zone: us-east-1f
      maistra-version: 2.4.7
      pod-template-hash: 5bd78dbc5f
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: helloworld-go
      service.istio.io/canonical-revision: helloworld-go-00001
      serving.knative.dev/configuration: helloworld-go
      serving.knative.dev/configurationGeneration: "1"
      serving.knative.dev/configurationUID: 6402ac10-ce56-4a74-a207-9167495600f6
      serving.knative.dev/revision: helloworld-go-00001
      serving.knative.dev/revisionUID: fe3dcdf0-fd1b-42cc-b546-73a365a8bae7
      serving.knative.dev/service: helloworld-go
      serving.knative.dev/serviceUID: d30abd09-975d-4327-a440-ef03bb5a8d6e
      topology.istio.io/subzone: ""
      topology.kubernetes.io/region: us-east-1
      topology.kubernetes.io/zone: us-east-1f
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ip-10-0-105-86
      operation: Update
      subresource: status
      time: "2024-06-05T10:59:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            f:failure-domain.beta.kubernetes.io/region: {}
            f:failure-domain.beta.kubernetes.io/zone: {}
            f:topology.istio.io/subzone: {}
            f:topology.kubernetes.io/region: {}
            f:topology.kubernetes.io/zone: {}
      manager: istio-operator
      operation: Update
      time: "2024-06-05T10:59:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:autoscaling.knative.dev/minScale: {}
            f:autoscaling.knative.dev/target: {}
            f:autoscaling.knative.dev/targetBurstCapacity: {}
            f:queue.sidecar.serving.knative.dev/resourcePercentage: {}
            f:serving.knative.dev/creator: {}
            f:sidecar.istio.io/inject: {}
            f:sidecar.istio.io/rewriteAppHTTPProbers: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:service.istio.io/canonical-name: {}
            f:service.istio.io/canonical-revision: {}
            f:serving.knative.dev/configuration: {}
            f:serving.knative.dev/configurationGeneration: {}
            f:serving.knative.dev/configurationUID: {}
            f:serving.knative.dev/revision: {}
            f:serving.knative.dev/revisionUID: {}
            f:serving.knative.dev/service: {}
            f:serving.knative.dev/serviceUID: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"eb5f4563-3661-439f-8cf2-d2a23176f529"}: {}
        f:spec:
          f:containers:
            k:{"name":"queue-proxy"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"CONTAINER_CONCURRENCY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_HTTP_FULL_DUPLEX"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_HTTP2_AUTO_DETECTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_PROFILING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HOST_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"METRICS_COLLECTOR_ADDRESS"}:
                  .: {}
                  f:name: {}
                k:{"name":"METRICS_DOMAIN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"QUEUE_SERVING_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"QUEUE_SERVING_TLS_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REVISION_IDLE_TIMEOUT_SECONDS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REVISION_RESPONSE_START_TIMEOUT_SECONDS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REVISION_TIMEOUT_SECONDS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ROOT_CA"}:
                  .: {}
                  f:name: {}
                k:{"name":"SERVING_CONFIGURATION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_ENABLE_PROBE_REQUEST_LOG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_ENABLE_REQUEST_LOG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_LOGGING_CONFIG"}:
                  .: {}
                  f:name: {}
                k:{"name":"SERVING_LOGGING_LEVEL"}:
                  .: {}
                  f:name: {}
                k:{"name":"SERVING_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_POD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SERVING_POD_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SERVING_READINESS_PROBE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_REQUEST_LOG_TEMPLATE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_REQUEST_METRICS_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_REQUEST_METRICS_REPORTING_PERIOD_SECONDS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_REVISION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_SERVICE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SYSTEM_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TRACING_CONFIG_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TRACING_CONFIG_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TRACING_CONFIG_SAMPLE_RATE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TRACING_CONFIG_ZIPKIN_ENDPOINT"}:
                  .: {}
                  f:name: {}
                k:{"name":"USER_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8012,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8022,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8112,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9091,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:httpHeaders: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
            k:{"name":"user-container"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"K_CONFIGURATION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"K_REVISION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"K_SERVICE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TARGET"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:httpGet:
                    .: {}
                    f:path: {}
                    f:port: {}
                    f:scheme: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-05T10:59:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2024-06-05T10:59:14Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.129.2.23"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-05T10:59:17Z"
    name: helloworld-go-00001-deployment-5bd78dbc5f-xlp2f
    namespace: user-ns
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: helloworld-go-00001-deployment-5bd78dbc5f
      uid: eb5f4563-3661-439f-8cf2-d2a23176f529
    resourceVersion: "43976"
    uid: 698dd6e5-981e-4acf-be36-73aac8b5a11f
  spec:
    containers:
    - env:
      - name: TARGET
        value: Go Sample v1
      - name: PORT
        value: "8080"
      - name: K_REVISION
        value: helloworld-go-00001
      - name: K_CONFIGURATION
        value: helloworld-go
      - name: K_SERVICE
        value: helloworld-go
      image: index.docker.io/skonto/helloworld-go@sha256:dd20d7659c16bdc58c09740a543ef3c36b7c04742a2b6b280a30c2a76dcf6c09
      imagePullPolicy: Always
      lifecycle:
        preStop:
          httpGet:
            path: /wait-for-drain
            port: 8022
            scheme: HTTP
      name: user-container
      ports:
      - containerPort: 8080
        name: user-port
        protocol: TCP
      resources:
        requests:
          cpu: 200m
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000850000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r28vl
        readOnly: true
    - env:
      - name: SERVING_NAMESPACE
        value: user-ns
      - name: SERVING_SERVICE
        value: helloworld-go
      - name: SERVING_CONFIGURATION
        value: helloworld-go
      - name: SERVING_REVISION
        value: helloworld-go-00001
      - name: QUEUE_SERVING_PORT
        value: "8012"
      - name: QUEUE_SERVING_TLS_PORT
        value: "8112"
      - name: CONTAINER_CONCURRENCY
        value: "0"
      - name: REVISION_TIMEOUT_SECONDS
        value: "300"
      - name: REVISION_RESPONSE_START_TIMEOUT_SECONDS
        value: "0"
      - name: REVISION_IDLE_TIMEOUT_SECONDS
        value: "0"
      - name: SERVING_POD
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: SERVING_POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVING_LOGGING_CONFIG
      - name: SERVING_LOGGING_LEVEL
      - name: SERVING_REQUEST_LOG_TEMPLATE
        value: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl":
          "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}",
          "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent":
          "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp":
          "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency":
          "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId":
          "{{index .Request.Header "X-B3-Traceid"}}"}'
      - name: SERVING_ENABLE_REQUEST_LOG
        value: "false"
      - name: SERVING_REQUEST_METRICS_BACKEND
        value: prometheus
      - name: SERVING_REQUEST_METRICS_REPORTING_PERIOD_SECONDS
        value: "5"
      - name: TRACING_CONFIG_BACKEND
        value: none
      - name: TRACING_CONFIG_ZIPKIN_ENDPOINT
      - name: TRACING_CONFIG_DEBUG
        value: "false"
      - name: TRACING_CONFIG_SAMPLE_RATE
        value: "0.1"
      - name: USER_PORT
        value: "8080"
      - name: SYSTEM_NAMESPACE
        value: knative-serving
      - name: METRICS_DOMAIN
        value: knative.dev/internal/serving
      - name: SERVING_READINESS_PROBE
        value: '{"tcpSocket":{"port":8080,"host":"127.0.0.1"},"successThreshold":1}'
      - name: ENABLE_PROFILING
        value: "false"
      - name: SERVING_ENABLE_PROBE_REQUEST_LOG
        value: "false"
      - name: METRICS_COLLECTOR_ADDRESS
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: ENABLE_HTTP2_AUTO_DETECTION
        value: "false"
      - name: ENABLE_HTTP_FULL_DUPLEX
        value: "false"
      - name: ROOT_CA
      image: registry.redhat.io/openshift-serverless-1/serving-queue-rhel8@sha256:a0d0c8517ff470e3afac4c90df5e6541d974507feb50eac9719f87fcf78bba96
      imagePullPolicy: IfNotPresent
      name: queue-proxy
      ports:
      - containerPort: 8022
        name: http-queueadm
        protocol: TCP
      - containerPort: 9090
        name: http-autometric
        protocol: TCP
      - containerPort: 9091
        name: http-usermetric
        protocol: TCP
      - containerPort: 8012
        name: queue-port
        protocol: TCP
      - containerPort: 8112
        name: https-port
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          httpHeaders:
          - name: K-Network-Probe
            value: queue
          path: /app-health/queue-proxy/readyz
          port: 15020
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 25m
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000850000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r28vl
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --log_output_level=default:warn
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod-basic.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: PROXY_CONFIG
        value: |
          {"discoveryAddress":"istiod-basic.istio-system.svc:15012","proxyMetadata":{"ISTIO_META_DNS_AUTO_ALLOCATE":"true","ISTIO_META_DNS_CAPTURE":"true","PROXY_XDS_VIA_AGENT":"true"},"terminationDrainDuration":"35s"}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
              {"name":"user-port","containerPort":8080,"protocol":"TCP"}
              ,{"name":"http-queueadm","containerPort":8022,"protocol":"TCP"}
              ,{"name":"http-autometric","containerPort":9090,"protocol":"TCP"}
              ,{"name":"http-usermetric","containerPort":9091,"protocol":"TCP"}
              ,{"name":"queue-port","containerPort":8012,"protocol":"TCP"}
              ,{"name":"https-port","containerPort":8112,"protocol":"TCP"}
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: user-container,queue-proxy
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: helloworld-go-00001-deployment
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/user-ns/deployments/helloworld-go-00001-deployment
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: ISTIO_META_DNS_AUTO_ALLOCATE
        value: "true"
      - name: ISTIO_META_DNS_CAPTURE
        value: "true"
      - name: PROXY_XDS_VIA_AGENT
        value: "true"
      - name: ISTIO_KUBE_APP_PROBERS
        value: '{"/app-health/queue-proxy/readyz":{"httpGet":{"path":"/","port":8012,"scheme":"HTTP","httpHeaders":[{"name":"K-Network-Probe","value":"queue"}]},"timeoutSeconds":1}}'
      image: registry.redhat.io/openshift-service-mesh/proxyv2-rhel8@sha256:186619a888331a58729e27e67fbcee236875c1998b6714565238db53e9a1f8bd
      imagePullPolicy: IfNotPresent
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 128Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
          - KILL
          - MKNOD
          - SETGID
          - SETUID
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1000850001
        runAsNonRoot: true
        runAsUser: 1000850001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/workload-spiffe-uds
        name: workload-socket
      - mountPath: /var/run/secrets/credential-uds
        name: credential-socket
      - mountPath: /var/run/secrets/workload-spiffe-credentials
        name: workload-certs
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r28vl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    imagePullSecrets:
    - name: default-dockercfg-hd4sm
    nodeName: ip-10-0-105-86.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000850000
      seLinuxOptions:
        level: s0:c29,c19
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - emptyDir: {}
      name: workload-socket
    - emptyDir: {}
      name: credential-socket
    - emptyDir: {}
      name: workload-certs
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
    - name: kube-api-access-r28vl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-05T10:59:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-05T10:59:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-05T10:59:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-05T10:59:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://04f56eb35d7663a1fc37d906c23e790d2c75e812aeeacbb916bc7e0cb405f72d
      image: registry.redhat.io/openshift-service-mesh/proxyv2-rhel8@sha256:186619a888331a58729e27e67fbcee236875c1998b6714565238db53e9a1f8bd
      imageID: registry.redhat.io/openshift-service-mesh/proxyv2-rhel8@sha256:186619a888331a58729e27e67fbcee236875c1998b6714565238db53e9a1f8bd
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-05T10:59:16Z"
    - containerID: cri-o://c7864ce1a7f018277cfc4ac752e656b92a101c1192d4ef641f1eb076549afab1
      image: registry.redhat.io/openshift-serverless-1/serving-queue-rhel8@sha256:a0d0c8517ff470e3afac4c90df5e6541d974507feb50eac9719f87fcf78bba96
      imageID: registry.redhat.io/openshift-serverless-1/serving-queue-rhel8@sha256:35293a4f29e6afc888e84adaab98fb3275c10d36ef4f1c989ff890fbb5e0c83c
      lastState: {}
      name: queue-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-05T10:59:16Z"
    - containerID: cri-o://47c21d1fbcd1c9edd1fe25659ee04e647f1e09cfce780c4d086272348daf1394
      image: docker.io/skonto/helloworld-go@sha256:dd20d7659c16bdc58c09740a543ef3c36b7c04742a2b6b280a30c2a76dcf6c09
      imageID: docker.io/skonto/helloworld-go@sha256:dd20d7659c16bdc58c09740a543ef3c36b7c04742a2b6b280a30c2a76dcf6c09
      lastState: {}
      name: user-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-05T10:59:14Z"
    hostIP: 10.0.105.86
    phase: Running
    podIP: 10.129.2.23
    podIPs:
    - ip: 10.129.2.23
    qosClass: Burstable
    startTime: "2024-06-05T10:59:13Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      autoscaling.knative.dev/minScale: "2"
      autoscaling.knative.dev/target: "10"
      autoscaling.knative.dev/targetBurstCapacity: "0"
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.131.0.31/23"],"mac_address":"0a:58:0a:83:00:1f","gateway_ips":["10.131.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.131.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.131.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.131.0.1"}],"ip_address":"10.131.0.31/23","gateway_ip":"10.131.0.1"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.131.0.31"
            ],
            "mac": "0a:58:0a:83:00:1f",
            "default": true,
            "dns": {}
        },{
            "name": "user-ns/v2-4-istio-cni",
            "dns": {}
        }]
      k8s.v1.cni.cncf.io/networks: v2-4-istio-cni
      kubectl.kubernetes.io/default-container: user-container
      kubectl.kubernetes.io/default-logs-container: user-container
      openshift.io/scc: restricted-v2
      prometheus.io/path: /stats/prometheus
      prometheus.io/port: "15020"
      prometheus.io/scrape: "true"
      queue.sidecar.serving.knative.dev/resourcePercentage: "0.3"
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
      serving.knative.dev/creator: system:admin
      sidecar.istio.io/inject: "true"
      sidecar.istio.io/interceptionMode: REDIRECT
      sidecar.istio.io/rewriteAppHTTPProbers: "true"
      sidecar.istio.io/status: '{"initContainers":null,"containers":["istio-proxy"],"volumes":["workload-socket","credential-socket","workload-certs","istio-envoy","istio-data","istio-podinfo","istiod-ca-cert"],"imagePullSecrets":null,"revision":"basic"}'
      traffic.sidecar.istio.io/excludeInboundPorts: 15090,8444,8022,15021
      traffic.sidecar.istio.io/includeInboundPorts: '*'
      traffic.sidecar.istio.io/includeOutboundIPRanges: '*'
    creationTimestamp: "2024-06-05T10:59:13Z"
    generateName: helloworld-go-00001-deployment-5bd78dbc5f-
    labels:
      app: helloworld-go
      failure-domain.beta.kubernetes.io/region: us-east-1
      failure-domain.beta.kubernetes.io/zone: us-east-1d
      maistra-version: 2.4.7
      pod-template-hash: 5bd78dbc5f
      security.istio.io/tlsMode: istio
      service.istio.io/canonical-name: helloworld-go
      service.istio.io/canonical-revision: helloworld-go-00001
      serving.knative.dev/configuration: helloworld-go
      serving.knative.dev/configurationGeneration: "1"
      serving.knative.dev/configurationUID: 6402ac10-ce56-4a74-a207-9167495600f6
      serving.knative.dev/revision: helloworld-go-00001
      serving.knative.dev/revisionUID: fe3dcdf0-fd1b-42cc-b546-73a365a8bae7
      serving.knative.dev/service: helloworld-go
      serving.knative.dev/serviceUID: d30abd09-975d-4327-a440-ef03bb5a8d6e
      topology.istio.io/subzone: ""
      topology.kubernetes.io/region: us-east-1
      topology.kubernetes.io/zone: us-east-1d
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.ovn.org/pod-networks: {}
      manager: ip-10-0-53-229
      operation: Update
      subresource: status
      time: "2024-06-05T10:59:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            f:failure-domain.beta.kubernetes.io/region: {}
            f:failure-domain.beta.kubernetes.io/zone: {}
            f:topology.istio.io/subzone: {}
            f:topology.kubernetes.io/region: {}
            f:topology.kubernetes.io/zone: {}
      manager: istio-operator
      operation: Update
      time: "2024-06-05T10:59:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:autoscaling.knative.dev/minScale: {}
            f:autoscaling.knative.dev/target: {}
            f:autoscaling.knative.dev/targetBurstCapacity: {}
            f:queue.sidecar.serving.knative.dev/resourcePercentage: {}
            f:serving.knative.dev/creator: {}
            f:sidecar.istio.io/inject: {}
            f:sidecar.istio.io/rewriteAppHTTPProbers: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app: {}
            f:pod-template-hash: {}
            f:service.istio.io/canonical-name: {}
            f:service.istio.io/canonical-revision: {}
            f:serving.knative.dev/configuration: {}
            f:serving.knative.dev/configurationGeneration: {}
            f:serving.knative.dev/configurationUID: {}
            f:serving.knative.dev/revision: {}
            f:serving.knative.dev/revisionUID: {}
            f:serving.knative.dev/service: {}
            f:serving.knative.dev/serviceUID: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"eb5f4563-3661-439f-8cf2-d2a23176f529"}: {}
        f:spec:
          f:containers:
            k:{"name":"queue-proxy"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"CONTAINER_CONCURRENCY"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_HTTP_FULL_DUPLEX"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_HTTP2_AUTO_DETECTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_PROFILING"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"HOST_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"METRICS_COLLECTOR_ADDRESS"}:
                  .: {}
                  f:name: {}
                k:{"name":"METRICS_DOMAIN"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"QUEUE_SERVING_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"QUEUE_SERVING_TLS_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REVISION_IDLE_TIMEOUT_SECONDS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REVISION_RESPONSE_START_TIMEOUT_SECONDS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REVISION_TIMEOUT_SECONDS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ROOT_CA"}:
                  .: {}
                  f:name: {}
                k:{"name":"SERVING_CONFIGURATION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_ENABLE_PROBE_REQUEST_LOG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_ENABLE_REQUEST_LOG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_LOGGING_CONFIG"}:
                  .: {}
                  f:name: {}
                k:{"name":"SERVING_LOGGING_LEVEL"}:
                  .: {}
                  f:name: {}
                k:{"name":"SERVING_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_POD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SERVING_POD_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SERVING_READINESS_PROBE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_REQUEST_LOG_TEMPLATE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_REQUEST_METRICS_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_REQUEST_METRICS_REPORTING_PERIOD_SECONDS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_REVISION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SERVING_SERVICE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"SYSTEM_NAMESPACE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TRACING_CONFIG_BACKEND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TRACING_CONFIG_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TRACING_CONFIG_SAMPLE_RATE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TRACING_CONFIG_ZIPKIN_ENDPOINT"}:
                  .: {}
                  f:name: {}
                k:{"name":"USER_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8012,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8022,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":8112,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9090,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9091,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:httpHeaders: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
                f:runAsNonRoot: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
            k:{"name":"user-container"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"K_CONFIGURATION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"K_REVISION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"K_SERVICE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"TARGET"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:httpGet:
                    .: {}
                    f:path: {}
                    f:port: {}
                    f:scheme: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":8080,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:terminationGracePeriodSeconds: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-06-05T10:59:13Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:k8s.v1.cni.cncf.io/network-status: {}
      manager: multus-daemon
      operation: Update
      subresource: status
      time: "2024-06-05T10:59:14Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.131.0.31"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      subresource: status
      time: "2024-06-05T10:59:19Z"
    name: helloworld-go-00001-deployment-5bd78dbc5f-zslnq
    namespace: user-ns
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: helloworld-go-00001-deployment-5bd78dbc5f
      uid: eb5f4563-3661-439f-8cf2-d2a23176f529
    resourceVersion: "44015"
    uid: 1eda0de3-63d8-4fa4-bf15-d6cb93464578
  spec:
    containers:
    - env:
      - name: TARGET
        value: Go Sample v1
      - name: PORT
        value: "8080"
      - name: K_REVISION
        value: helloworld-go-00001
      - name: K_CONFIGURATION
        value: helloworld-go
      - name: K_SERVICE
        value: helloworld-go
      image: index.docker.io/skonto/helloworld-go@sha256:dd20d7659c16bdc58c09740a543ef3c36b7c04742a2b6b280a30c2a76dcf6c09
      imagePullPolicy: Always
      lifecycle:
        preStop:
          httpGet:
            path: /wait-for-drain
            port: 8022
            scheme: HTTP
      name: user-container
      ports:
      - containerPort: 8080
        name: user-port
        protocol: TCP
      resources:
        requests:
          cpu: 200m
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000850000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hm2t8
        readOnly: true
    - env:
      - name: SERVING_NAMESPACE
        value: user-ns
      - name: SERVING_SERVICE
        value: helloworld-go
      - name: SERVING_CONFIGURATION
        value: helloworld-go
      - name: SERVING_REVISION
        value: helloworld-go-00001
      - name: QUEUE_SERVING_PORT
        value: "8012"
      - name: QUEUE_SERVING_TLS_PORT
        value: "8112"
      - name: CONTAINER_CONCURRENCY
        value: "0"
      - name: REVISION_TIMEOUT_SECONDS
        value: "300"
      - name: REVISION_RESPONSE_START_TIMEOUT_SECONDS
        value: "0"
      - name: REVISION_IDLE_TIMEOUT_SECONDS
        value: "0"
      - name: SERVING_POD
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: SERVING_POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVING_LOGGING_CONFIG
      - name: SERVING_LOGGING_LEVEL
      - name: SERVING_REQUEST_LOG_TEMPLATE
        value: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl":
          "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}",
          "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent":
          "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp":
          "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency":
          "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId":
          "{{index .Request.Header "X-B3-Traceid"}}"}'
      - name: SERVING_ENABLE_REQUEST_LOG
        value: "false"
      - name: SERVING_REQUEST_METRICS_BACKEND
        value: prometheus
      - name: SERVING_REQUEST_METRICS_REPORTING_PERIOD_SECONDS
        value: "5"
      - name: TRACING_CONFIG_BACKEND
        value: none
      - name: TRACING_CONFIG_ZIPKIN_ENDPOINT
      - name: TRACING_CONFIG_DEBUG
        value: "false"
      - name: TRACING_CONFIG_SAMPLE_RATE
        value: "0.1"
      - name: USER_PORT
        value: "8080"
      - name: SYSTEM_NAMESPACE
        value: knative-serving
      - name: METRICS_DOMAIN
        value: knative.dev/internal/serving
      - name: SERVING_READINESS_PROBE
        value: '{"tcpSocket":{"port":8080,"host":"127.0.0.1"},"successThreshold":1}'
      - name: ENABLE_PROFILING
        value: "false"
      - name: SERVING_ENABLE_PROBE_REQUEST_LOG
        value: "false"
      - name: METRICS_COLLECTOR_ADDRESS
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: ENABLE_HTTP2_AUTO_DETECTION
        value: "false"
      - name: ENABLE_HTTP_FULL_DUPLEX
        value: "false"
      - name: ROOT_CA
      image: registry.redhat.io/openshift-serverless-1/serving-queue-rhel8@sha256:a0d0c8517ff470e3afac4c90df5e6541d974507feb50eac9719f87fcf78bba96
      imagePullPolicy: IfNotPresent
      name: queue-proxy
      ports:
      - containerPort: 8022
        name: http-queueadm
        protocol: TCP
      - containerPort: 9090
        name: http-autometric
        protocol: TCP
      - containerPort: 9091
        name: http-usermetric
        protocol: TCP
      - containerPort: 8012
        name: queue-port
        protocol: TCP
      - containerPort: 8112
        name: https-port
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          httpHeaders:
          - name: K-Network-Probe
            value: queue
          path: /app-health/queue-proxy/readyz
          port: 15020
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 25m
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000850000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hm2t8
        readOnly: true
    - args:
      - proxy
      - sidecar
      - --domain
      - $(POD_NAMESPACE).svc.cluster.local
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --log_output_level=default:warn
      - --concurrency
      - "2"
      env:
      - name: JWT_POLICY
        value: first-party-jwt
      - name: PILOT_CERT_PROVIDER
        value: istiod
      - name: CA_ADDR
        value: istiod-basic.istio-system.svc:15012
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: INSTANCE_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: SERVICE_ACCOUNT
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.serviceAccountName
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: PROXY_CONFIG
        value: |
          {"discoveryAddress":"istiod-basic.istio-system.svc:15012","proxyMetadata":{"ISTIO_META_DNS_AUTO_ALLOCATE":"true","ISTIO_META_DNS_CAPTURE":"true","PROXY_XDS_VIA_AGENT":"true"},"terminationDrainDuration":"35s"}
      - name: ISTIO_META_POD_PORTS
        value: |-
          [
              {"name":"user-port","containerPort":8080,"protocol":"TCP"}
              ,{"name":"http-queueadm","containerPort":8022,"protocol":"TCP"}
              ,{"name":"http-autometric","containerPort":9090,"protocol":"TCP"}
              ,{"name":"http-usermetric","containerPort":9091,"protocol":"TCP"}
              ,{"name":"queue-port","containerPort":8012,"protocol":"TCP"}
              ,{"name":"https-port","containerPort":8112,"protocol":"TCP"}
          ]
      - name: ISTIO_META_APP_CONTAINERS
        value: user-container,queue-proxy
      - name: ISTIO_META_CLUSTER_ID
        value: Kubernetes
      - name: ISTIO_META_INTERCEPTION_MODE
        value: REDIRECT
      - name: ISTIO_META_WORKLOAD_NAME
        value: helloworld-go-00001-deployment
      - name: ISTIO_META_OWNER
        value: kubernetes://apis/apps/v1/namespaces/user-ns/deployments/helloworld-go-00001-deployment
      - name: ISTIO_META_MESH_ID
        value: cluster.local
      - name: TRUST_DOMAIN
        value: cluster.local
      - name: ISTIO_META_DNS_AUTO_ALLOCATE
        value: "true"
      - name: ISTIO_META_DNS_CAPTURE
        value: "true"
      - name: PROXY_XDS_VIA_AGENT
        value: "true"
      - name: ISTIO_KUBE_APP_PROBERS
        value: '{"/app-health/queue-proxy/readyz":{"httpGet":{"path":"/","port":8012,"scheme":"HTTP","httpHeaders":[{"name":"K-Network-Probe","value":"queue"}]},"timeoutSeconds":1}}'
      image: registry.redhat.io/openshift-service-mesh/proxyv2-rhel8@sha256:186619a888331a58729e27e67fbcee236875c1998b6714565238db53e9a1f8bd
      imagePullPolicy: IfNotPresent
      name: istio-proxy
      ports:
      - containerPort: 15090
        name: http-envoy-prom
        protocol: TCP
      readinessProbe:
        failureThreshold: 30
        httpGet:
          path: /healthz/ready
          port: 15021
          scheme: HTTP
        initialDelaySeconds: 1
        periodSeconds: 2
        successThreshold: 1
        timeoutSeconds: 3
      resources:
        limits:
          cpu: "2"
          memory: 1Gi
        requests:
          cpu: 10m
          memory: 128Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
          - KILL
          - MKNOD
          - SETGID
          - SETUID
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1000850001
        runAsNonRoot: true
        runAsUser: 1000850001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/workload-spiffe-uds
        name: workload-socket
      - mountPath: /var/run/secrets/credential-uds
        name: credential-socket
      - mountPath: /var/run/secrets/workload-spiffe-credentials
        name: workload-certs
      - mountPath: /var/run/secrets/istio
        name: istiod-ca-cert
      - mountPath: /var/lib/istio/data
        name: istio-data
      - mountPath: /etc/istio/proxy
        name: istio-envoy
      - mountPath: /etc/istio/pod
        name: istio-podinfo
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hm2t8
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    imagePullSecrets:
    - name: default-dockercfg-hd4sm
    nodeName: ip-10-0-53-229.ec2.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000850000
      seLinuxOptions:
        level: s0:c29,c19
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    volumes:
    - emptyDir: {}
      name: workload-socket
    - emptyDir: {}
      name: credential-socket
    - emptyDir: {}
      name: workload-certs
    - emptyDir:
        medium: Memory
      name: istio-envoy
    - emptyDir: {}
      name: istio-data
    - downwardAPI:
        defaultMode: 420
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: istio-podinfo
    - configMap:
        defaultMode: 420
        name: istio-ca-root-cert
      name: istiod-ca-cert
    - name: kube-api-access-hm2t8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-06-05T10:59:13Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-06-05T10:59:19Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-06-05T10:59:19Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-06-05T10:59:13Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://7b93a5b741eb12bd665aa344b420a5bcc3fbb3fb796b4ef83d5679d7929badc4
      image: registry.redhat.io/openshift-service-mesh/proxyv2-rhel8@sha256:186619a888331a58729e27e67fbcee236875c1998b6714565238db53e9a1f8bd
      imageID: registry.redhat.io/openshift-service-mesh/proxyv2-rhel8@sha256:186619a888331a58729e27e67fbcee236875c1998b6714565238db53e9a1f8bd
      lastState: {}
      name: istio-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-05T10:59:18Z"
    - containerID: cri-o://40f6ccc9d3816f47947d85e7ac892c3667cbcb8931680d138ffa666eb47bd9b2
      image: registry.redhat.io/openshift-serverless-1/serving-queue-rhel8@sha256:a0d0c8517ff470e3afac4c90df5e6541d974507feb50eac9719f87fcf78bba96
      imageID: registry.redhat.io/openshift-serverless-1/serving-queue-rhel8@sha256:35293a4f29e6afc888e84adaab98fb3275c10d36ef4f1c989ff890fbb5e0c83c
      lastState: {}
      name: queue-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-05T10:59:18Z"
    - containerID: cri-o://f97bbc7ca7fee8bbfadb6926e19fe0edea7ee73445bd5d9568d4c3bf0ab2d787
      image: docker.io/skonto/helloworld-go@sha256:dd20d7659c16bdc58c09740a543ef3c36b7c04742a2b6b280a30c2a76dcf6c09
      imageID: docker.io/skonto/helloworld-go@sha256:dd20d7659c16bdc58c09740a543ef3c36b7c04742a2b6b280a30c2a76dcf6c09
      lastState: {}
      name: user-container
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-06-05T10:59:15Z"
    hostIP: 10.0.53.229
    phase: Running
    podIP: 10.131.0.31
    podIPs:
    - ip: 10.131.0.31
    qosClass: Burstable
    startTime: "2024-06-05T10:59:13Z"
kind: PodList
metadata:
  resourceVersion: "54810"
